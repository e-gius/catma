/* (This is the new BSD license.)
* Copyright (c) 2012, Chris Culy
* All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*     * Redistributions of source code must retain the above copyright
*       notice, this list of conditions and the following disclaimer.
*     * Redistributions in binary form must reproduce the above copyright
*       notice, this list of conditions and the following disclaimer in the
*       documentation and/or other materials provided with the distribution.
*     * Neither the name of the Chris Culy nor the 
*		names of its contributors may be used to endorse or promote 
*		products from this software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY Chris Culy
* ``AS IS'' AND ANY OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, 
* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
* ARE DISCLAIMED. IN NO EVENT SHALL Chris Culy
* BE LIABLE FOR ANY, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
* CONSEQUENTIAL DAMAGES INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE 
* GOODS OR SERVICES; OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
* CAUSED AND ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR 
* TORT INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
* THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/"use strict";

var doubletree = {};

(function() {
function e(t, r) {
if (!t.children) {
return;
}
var i = t.children.length;
for (var s = 0; s < i; s++) {
var o = t.children[s];
if (n(o.info.ids, r)) {
t.children[s] = null;
} else {
e(o, r);
}
}
t.children = t.children.filter(function(e) {
return e != null;
});
var u = d3.max(t.children.map(function(e) {
return e.maxChildren;
}));
t.maxChildren = Math.max(t.children.length, u);
}
function t(e, t) {
for (var n in e) {
if (n in t) {
return true;
}
}
return false;
}
function n(e, t) {
if (!e || !t) {
return false;
}
for (var n in e) {
if (!(n in t)) {
return false;
}
}
return true;
}
function r() {}
doubletree.DoubleTree = function() {
function g() {
var e = d3.event;
var t = d3.select(this);
var n = t.attr("transform");
var r;
if (!n) {
r = [ null, 0, 0 ];
} else {
r = n.match(/^translate.(.+),(.+).$/);
}
var i = 1 * r[1] + d3.event.dx;
var s = 1 * r[2] + d3.event.dy;
d3.select(this).attr("transform", "translate(" + i + "," + s + ")");
}
function C(e) {
e.each(function(e, n) {
t.push(this[n]);
});
}
var t = [];
var n = 600;
var i;
var s = {
left: [],
right: []
};
var o = {
alt: r,
shift: r
};
var u = true;
var a = true;
var f = doubletree.sortByStrFld("token");
var l = doubletree.tokenText;
var c = function(e) {
return doubletree.fieldText(e, "POS");
};
var h = function(e) {
return "rgba(255,255,255,0)";
};
var p = function(e) {
return "rgba(255,255,255,0)";
};
var d = false;
var v = d3.dispatch("idsUpdated");
v.on("idsUpdated", function() {
if (this == w) {
E.setIds(w.continuationIDs);
E.updateContinuations();
} else if (this == E) {
w.setIds(E.continuationIDs);
w.updateContinuations();
}
});
var m = d3.behavior.drag().origin(Object).on("drag", g);
var y, b, w, E;
var S = 14;
var x = 1.15 * S;
var T = 8;
var N;
C.init = function(e) {
d3.select(d3.selectAll(e)).call(this);
return C;
};
C.redraw = function() {
C.setupFromTries(y, b);
return C;
};
C.setupFromTries = function(r, g) {
y = r.getUniqRoot();
b = g.getUniqRoot();
var k = y.toTree(s.left);
var L = b.toTree(s.right);
if (Object.keys(L.pruned).length > 0) {
e(k, L.pruned);
}
if (Object.keys(k.pruned).length > 0) {
e(L, k.pruned);
}
var A = Math.max(k.maxChildren, L.maxChildren);
if (isNaN(A) || A == 0) {
d = false;
return C;
}
if (a) {
N = d3.scale.log().range([ T, S ]);
} else {
N = function() {
return S;
};
N.domain = function() {};
}
i = Math.max(200, A * (x - 2));
var O = Math.max(k.maxLen, L.maxLen);
var M = Math.max(80, O * .6 * x);
if (M > 200) {
M = 200;
}
var _ = Math.min(k.minCount, L.minCount);
N.domain([ _, k.info.count ]);
var D = {
top: 20,
right: 20,
bottom: 20,
left: 20
}, P = n - D.right - D.left, H = i - D.top - D.bottom;
t[0].forEach(function(e, t) {
var r = e;
var s;
var o = d3.select(r).select("svg");
if (o[0][0] == null) {
s = d3.select(r).append("svg").attr("width", P + D.right + D.left).attr("height", H + D.top + D.bottom);
s.append("g").call(m);
} else {
s = o;
s.attr("width", P + D.right + D.left).attr("height", H + D.top + D.bottom);
s.selectAll("g *").remove();
}
w = new doubletree.Tree(s.select("g"), n, i, M, k, true, f, v, N, u, l, c, h, p);
E = new doubletree.Tree(s.select("g"), n, i, M, L, false, f, v, N, u, l, c, h, p);
});
w.handleAltPress = o.alt;
E.handleAltPress = o.alt;
w.handleShiftPress = o.shift;
E.handleShiftPress = o.shift;
d = true;
return C;
};
C.setupFromArrays = function(e, t, n, r, i, s, o) {
if (undefined == r && y) {
r = y.caseSensitive();
}
if (undefined == i && y) {
i = y.fieldNames();
}
if (undefined == s && y) {
s = y.fieldDelim();
}
if (undefined == o && y) {
o = y.distinguishingFieldsArray();
}
y = new doubletree.Trie(r, i, s, o);
b = new doubletree.Trie(r, i, s, o);
var u = t.length;
for (var a = 0; a < u; a++) {
var f = t[a];
e[a].push(f);
e[a].reverse();
y.addNgram(e[a], a);
n[a].unshift(f);
b.addNgram(n[a], a);
}
C.setupFromTries(y, b);
return C;
};
C.search = function(e) {
w.search(e);
E.search(e);
var n = d3.select(t[0][0]);
var r = n.selectAll("text.foundText");
if (r.empty()) {
return 0;
}
var i = r[0].length;
var s = n.selectAll("text.rtNdText.foundText");
if (s[0][0] != null) {
i--;
}
return i;
};
C.clearSearch = function() {
w.clearSearch();
E.clearSearch();
return C;
};
C.updateTokenExtras = function() {
w.showTokenExtras(u);
E.showTokenExtras(u);
var e = d3.select(t[0][0]);
var n = e.select('.tokenExtra[display="inline"]');
if (!n.empty()) {
var r = n.style("height");
if (r == "0px") {
C.redraw();
}
}
return C;
};
C.visWidth = function(e) {
if (!arguments.length) return n;
n = e;
return C;
};
C.filters = function(e) {
if (!arguments.length) return s;
s = e;
return C;
};
C.handlers = function(e) {
if (!arguments.length) return o;
o = e;
return C;
};
C.showTokenExtra = function(e) {
if (!arguments.length) return u;
u = e;
return C;
};
C.scaleLabels = function(e) {
if (!arguments.length) return a;
a = e;
return C;
};
C.succeeded = function() {
return d;
};
C.sortFun = function(e) {
if (!arguments.length) return f;
f = e;
return C;
};
C.nodeText = function(e) {
if (!arguments.length) return l;
l = e;
return C;
};
C.tokenExtraText = function(e) {
if (!arguments.length) return c;
c = e;
return C;
};
C.rectColor = function(e) {
if (!arguments.length) return h;
h = e;
return C;
};
C.rectBorderColor = function(e) {
if (!arguments.length) return p;
p = e;
return C;
};
return C;
};
doubletree.Tree = function(e, r, i, s, o, u, a, f, l, c, h, p, d, v) {
function D(e) {
if (e.children) {
e._children = e.children;
e._children.forEach(D);
e.children = null;
}
}
function P(e) {
if (e.parent) {
e.parent.children.forEach(function(t) {
if (t != e) {
D(t);
}
});
}
}
function B(e, t) {
if (d3.event.altKey) {
H.handleAltPress(e, t);
return;
}
if (d3.event.shiftKey) {
H.handleShiftPress(e, t);
return;
}
if (!e.parent) {
return;
}
if (H.continuationIDs != e.info.ids) {
H.setIds(e.info.ids);
H.clickedNode = e.id;
f.idsUpdated.apply(H);
}
P(e);
if (e.children) {
e._children = e.children;
e.children = null;
} else {
e.children = e._children;
e._children = null;
}
H.update(e);
}
function j(e) {
return u ? N / 2 - e : N / 2 + e;
}
function F(e) {
return e - O;
}
var m = s;
var g = false || c;
var y = {};
var b;
var w = h;
var E = p;
var S = d;
var x = v;
var T = {
top: 20,
right: 20,
bottom: 20,
left: 20
}, N = r - T.right - T.left, C = i - T.top - T.bottom, k = 0, L = 500, A;
var O;
if (!a) {
a = doubletree.sortByStrFld("token");
}
var M = d3.layout.tree().size([ C, N ]).sort(a);
var _ = d3.svg.diagonal().projection(function(e) {
return [ j(e.y), F(e.x) ];
});
e = e.append("g").attr("transform", "translate(" + T.left + "," + T.top + ")");
this.readJSONTree = function(e) {
A = e;
A.x0 = C / 2;
A.y0 = N / 2;
A.children.forEach(D);
this.update(A);
};
var H = this;
this.update = function(t) {
if (!t) {
t = A;
}
var r = M.nodes(A).reverse();
O = A.x - C / 2;
r.forEach(function(e) {
e.y = e.depth * m;
});
var i = e.selectAll("g.node_" + u).data(r, function(e) {
return e.id || (e.id = ++k);
});
var s = i.enter().append("g").attr("class", "node node_" + u).attr("transform", function(e) {
return "translate(" + j(t.y0) + "," + F(t.x0) + ")";
}).on("click", B);
s.append("title").text(function(e) {
var t = doubletree.infoToText(e.info);
return t;
});
s.append("circle").attr("r", 1e-6).style("fill", function(e) {
return e._children ? "lightsteelblue" : "#fff";
});
var o = s.append("text").attr("class", function(e) {
if (e.depth == 0) {
return "rtNdText";
} else {
return "";
}
}).attr("x", function(e) {
if (e.children || e._children) {
return 0;
} else {
return u ? 10 : -10;
}
}).attr("text-anchor", function(e) {
if (!e.parent) {
return "middle";
}
if (e.children || e._children) {
return u ? "end" : "start";
} else {
return u ? "start" : "end";
}
}).style("font-size", function(e) {
return l(e.info.count) + "pt";
});
o.append("tspan").attr("dy", ".35em").attr("class", "tokenText").text(function(e) {
return w(e.info);
}).style("fill-opacity", 1e-6);
o.append("tspan").attr("dx", ".35em").attr("class", "tokenExtra").text(function(e) {
return E(e.info);
}).style("fill-opacity", 1e-6);
this.drawRects = function() {
var t = g ? "inline" : "none";
e.selectAll(".tokenExtra").attr("display", t);
i.selectAll("rect").remove();
var n = i.append("rect").attr("class", "nodeRect").attr("height", function() {
return this.parentElement.getBBox().height - 6;
}).attr("y", function(e) {
if (!e.parent) {
return -.5 * this.parentElement.getBBox().height / 2 - 2;
} else {
return -.5 * this.parentElement.getBBox().height / 2;
}
}).attr("width", function() {
return this.parentElement.getBBox().width;
}).attr("x", function(e) {
var t = this.parentElement.getBBox().width;
if (!e.parent) {
return -.33333 * t;
}
if (!u) {
return 0;
}
return -.5 * t;
}).style("stroke-opacity", 1).style("stroke-width", 1).style("stroke", function(e) {
return x(e.info);
}).style("fill", function(e) {
return S(e.info);
}).style("fill-opacity", function(e) {
if (!e.parent && !u) {
return 1e-6;
} else {
return 1;
}
});
};
try {
this.drawRects();
} catch (a) {}
var f = i.transition().duration(L).attr("transform", function(e) {
return "translate(" + j(e.y) + "," + F(e.x) + ")";
});
f.select("circle").attr("r", function(e) {
return e.children || e._children ? 1e-6 : 4.5;
}).style("fill", function(e) {
return e._children ? "lightsteelblue" : "#fff";
});
f.select("text").attr("class", function(e) {
var t = n(H.continuationIDs, e.info.ids);
if (t || !e.parent) {
classListAdd(this, "continuation");
} else {
classListRemove(this, "continuation");
}
return classListToString(this);
}).style("fill-opacity", 1);
f.selectAll("tspan").style("fill-opacity", 1);
var c = i.exit().transition().duration(L).attr("transform", function(e) {
return "translate(" + j(t.y) + "," + F(t.x) + ")";
}).remove();
c.select("circle").attr("r", 1e-6);
c.selectAll("tspan").style("fill-opacity", 1e-6);
var h = e.selectAll("path.link_" + u).data(M.links(r), function(e) {
return e.target.id;
});
h.enter().insert("path", "g").attr("class", "link link_" + u).attr("d", function(e) {
var n = {
x: t.x0,
y: t.y0
};
return _({
source: n,
target: n
});
});
h.transition().duration(L).attr("d", _);
h.exit().transition().duration(L).attr("d", function(e) {
var n = {
x: t.x,
y: t.y
};
return _({
source: n,
target: n
});
}).remove();
r.forEach(function(e) {
e.x0 = e.x;
e.y0 = e.y;
});
};
this.setIds = function(e) {
H.continuationIDs = e;
};
this.updateContinuations = function() {
e.selectAll("g.node_" + u + " text").classed("continuation", function(e) {
return t(e.info.ids, H.continuationIDs);
});
};
this.search = function(t) {
e.selectAll("g.node text").attr("class", function(e) {
var n = t.test(doubletree.tokenText(e.info));
if (n) {
classListAdd(this, "foundText");
} else {
classListRemove(this, "foundText");
}
return classListToString(this);
});
};
this.clearSearch = function() {
e.selectAll("g.node text").attr("class", function(e) {
classListRemove(this, "foundText");
return classListToString(this);
});
};
this.showTokenExtras = function(e) {
if (arguments.length == 0) {
return g;
}
g = e;
this.drawRects();
return this;
};
this.setRectColor = function(e) {
if (arguments.length == 0) {
return S;
}
S = e;
this.drawRects();
return this;
};
this.handleAltPress = function() {};
this.handleShifttPress = function() {};
this.readJSONTree(o);
return this;
};
doubletree.sortByStrFld = function(e) {
var t = e;
return function(e, n) {
var r = undefined == e.info[t];
var i = undefined == n.info[t];
if (r && i) {
return 0;
} else if (r) {
return -1;
} else if (i) {
return 1;
}
var s = e.info[t].join(" ").toLowerCase();
var o = n.info[t].join(" ").toLowerCase();
if (s < o) {
return -1;
} else if (s > o) {
return 1;
}
return 0;
};
};
doubletree.sortByCount = function() {
return function(e, t) {
return t.info.count - e.info.count;
};
};
doubletree.sortByContinuations = function() {
return function(e, t) {
return t.info.continuations - e.info.continuations;
};
};
doubletree.filterByMinCount = function(e) {
return function(t) {
return t.count >= e;
};
};
doubletree.filterByMaxCount = function(e) {
return function(t) {
return t.count <= e;
};
};
doubletree.filterByPOS = function(e) {
var t = new RegExp(e);
return function(e) {
return e["POS"] && e["POS"].filter(function(e) {
return e.search(t) > -1;
}).length > 0;
};
};
doubletree.fieldText = function(e, t) {
return e[t];
};
doubletree.tokenText = function(e) {
return doubletree.fieldText(e, "token");
};
doubletree.infoToText = function(e) {
var t = "";
for (var n in e) {
if (n == "ids") {
t += n + "	:	" + Object.keys(e[n]).join(",") + "\n";
} else {
t += n + "	:	" + e[n] + "\n";
}
}
return t;
};
})();